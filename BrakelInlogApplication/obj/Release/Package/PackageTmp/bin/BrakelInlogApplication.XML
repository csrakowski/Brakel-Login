<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BrakelInlogApplication</name>
    </assembly>
    <members>
        <member name="T:BrakelInlogApplication.APIException">
            <summary>
            The APIException is used to indicate a certain argument does not meet API definition in term of formatting, it's actual value is not evaluated.
            </summary>
        </member>
        <member name="M:BrakelInlogApplication.APIException.#ctor">
            <summary>
            Initializes a new instance of the BrakelInlogApplication.APIException class.
            </summary>
        </member>
        <member name="M:BrakelInlogApplication.APIException.#ctor(System.String)">
            <summary>
             Initializes a new instance of the BrakelInlogApplication.APIException class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:BrakelInlogApplication.APIException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the BrakelInlogApplication.APIException class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:BrakelInlogApplication.APIException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the BrakelInlogApplication.APIException class with a specified error message and the name of the parameter that causes this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="paramName">The name of the parameter that caused the current exception.</param>
        </member>
        <member name="M:BrakelInlogApplication.APIException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the BrakelInlogApplication.APIException class with a specified error message, the parameter name, and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="paramName">The name of the parameter that caused the current exception.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="T:BrakelInlogApplication.API">
            <summary>
            Entrypoint for the Async handler
            </summary>
        </member>
        <member name="M:BrakelInlogApplication.API.#ctor">
            <summary>
            Constructor, this will only be called once (Singleton behaviour)
            </summary>
        </member>
        <member name="M:BrakelInlogApplication.API.BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)">
            <summary>
            Entrypoint for the request handeling (Called by the ASP.NET runtime, do not invoke manually!)
            </summary>
            <param name="context">The current HttpContext</param>
            <param name="cb">The AsyncCallback</param>
            <param name="extraData">Extra data object</param>
            <returns>The AsyncResult</returns>
        </member>
        <member name="M:BrakelInlogApplication.API.EndProcessRequest(System.IAsyncResult)">
            <summary>
            Exit point for the request handeling, all cleanup code should go here (Called by the ASP.NET runtime, do not invoke manually!)
            </summary>
            <param name="result">The AsyncResult returned by BeginProcessRequest</param>
        </member>
        <member name="M:BrakelInlogApplication.API.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Old style entry point for handlers, should not be used.
            </summary>
            <param name="context">The current HttpContext</param>
        </member>
        <member name="P:BrakelInlogApplication.API.IsReusable">
            <summary>
            Boolean to indicate the handler is reusable which causes Singleton like behaviour (Performance tweak)
            </summary>
        </member>
        <member name="T:BrakelInlogApplication.AsynchOperation">
            <summary>
            Handler class used to handle the async requests
            </summary>
        </member>
        <member name="M:BrakelInlogApplication.AsynchOperation.#ctor(System.AsyncCallback,System.Web.HttpContext,System.Object)">
            <summary>
            Constructor (Called in BeginProcessRequest, do not invoke manually!) 
            </summary>
            <param name="callback">The AsyncCalback</param>
            <param name="context">The current HttpContext</param>
            <param name="state">The state object</param>
        </member>
        <member name="M:BrakelInlogApplication.AsynchOperation.StartAsyncWork">
            <summary>
            Method to start the async task
            </summary>
        </member>
        <member name="M:BrakelInlogApplication.AsynchOperation.StartAsyncTask(System.Object)">
            <summary>
            Internal handler method that handles the request
            </summary>
            <param name="workItemState"></param>
        </member>
        <member name="M:BrakelInlogApplication.AsynchOperation.login(System.String,System.String)">
            <summary>
            Validates the user's credentials and returns a token that will be used to validate other requests
            </summary>
            <param name="username">The username</param>
            <param name="passwordHash">The hashed password</param>
            <returns>A token not equal to all 0 on succes, a token of all 0 on failure</returns>
        </member>
        <member name="M:BrakelInlogApplication.AsynchOperation.getBuildings(System.Guid)">
            <summary>
            Returns a list of buildngs which the current user can see, and the permissions he has in those buildings
            </summary>
            <param name="userToken">The current user's token</param>
            <returns>The list of Buildings</returns>
        </member>
        <member name="M:BrakelInlogApplication.AsynchOperation.makeChangesToGroups(System.Guid,System.Int32,System.Collections.Generic.List{BrakelInlogApplication.Changes})">
            <summary>
            Method to iniate making changes to groups
            </summary>
            <param name="userToken">The user token</param>
            <param name="buildingId">The building id for the building in which the groups are</param>
            <param name="changes">The list of changes you want to commit</param>
            <returns>The list of changes with a boolean value to indicate succes of the operation per change</returns>
        </member>
        <member name="M:BrakelInlogApplication.AsynchOperation.getUserLayout(System.Guid,System.Int32)">
            <summary>
            Get the current user's screen layout for the selected building
            </summary>
            <param name="userToken">The current user's token</param>
            <param name="buildingId">The building for which you want the layout</param>
            <returns>A string representation of the XML, which describes the layout of the application</returns>
        </member>
        <member name="T:BrakelInlogApplication.Changes">
            <summary>
            Class used for taking actions with groups
            </summary>
        </member>
        <member name="M:BrakelInlogApplication.Changes.ToJSONString">
            <summary>
            Returns a JSON representation of the current object
            </summary>
            <returns>The JSON representing the current object</returns>
        </member>
        <member name="P:BrakelInlogApplication.Changes.GroupID">
            <summary>
            The group id this change will affect
            </summary>
        </member>
        <member name="P:BrakelInlogApplication.Changes.ChangeValue">
            <summary>
            The value the group will be changed to
            </summary>
        </member>
        <member name="P:BrakelInlogApplication.Changes.ChangeStatus">
            <summary>
            Status boolean, null for new, true if success, false if failed
            </summary>
        </member>
        <member name="T:BrakelInlogApplication.ConstantHelper">
            <summary>
            Helper class that wraps around the .NET ConfigurationManager and provides easier access
            </summary>
        </member>
        <member name="P:BrakelInlogApplication.ConstantHelper.ConnectionString">
            <summary>
            The connectionstring for the datasource provider
            </summary>
        </member>
        <member name="T:BrakelInlogApplication.Building">
            <summary>
            Class that represents a building/location in the system
            </summary>
        </member>
        <member name="M:BrakelInlogApplication.Building.ToJSONString">
            <summary>
            Returns a JSON representation of the current object
            </summary>
            <returns>The JSON representing the current object</returns>
        </member>
        <member name="M:BrakelInlogApplication.Building.ParseAccessRightsFromString(System.String)">
            <summary>
            Parses the input string and converts it to a value of the AccessRole Enumeration
            </summary>
            <param name="rightsName">The string representation of the AccessRole</param>
            <returns>The AccessRole</returns>
        </member>
        <member name="P:BrakelInlogApplication.Building.BuildingID">
            <summary>
            The building id used to identify the building
            </summary>
        </member>
        <member name="P:BrakelInlogApplication.Building.BuildingName">
            <summary>
            The name of the building for human readable context
            </summary>
        </member>
        <member name="P:BrakelInlogApplication.Building.AccessRole">
            <summary>
            The access role of the user in this building
            </summary>
        </member>
        <member name="P:BrakelInlogApplication.Building.Parent">
            <summary>
            Parent building of the current building, 0 if none
            </summary>
        </member>
        <member name="T:BrakelInlogApplication.AccessRole">
            <summary>
            Enum for the different access roles
            </summary>
        </member>
        <member name="F:BrakelInlogApplication.AccessRole.Administrator">
            <summary>
            Administrators have full access to the building, in read and edit mode.
            </summary>
        </member>
        <member name="F:BrakelInlogApplication.AccessRole.ReadOnly">
            <summary>
            ReadOnly users can only read the sensor results, but can not make changes
            </summary>
        </member>
        <member name="F:BrakelInlogApplication.AccessRole.None">
            <summary>
            None means the user has no rights in this building, buildings with these rights should not be shown in the list
            </summary>
        </member>
    </members>
</doc>
